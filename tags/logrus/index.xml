<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Logrus on HHFCodeRv</title>
    <link>https://georgehao.github.io/tags/logrus/</link>
    <description>Recent content in Logrus on HHFCodeRv</description>
    <generator>Hugo -- 0.152.2</generator>
    <language>zh</language>
    <copyright>2021 haohongfan</copyright>
    <lastBuildDate>Sat, 05 Oct 2019 11:21:24 +0800</lastBuildDate>
    <atom:link href="https://georgehao.github.io/tags/logrus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Logrus源码阅读(2)--logrus生命周期</title>
      <link>https://georgehao.github.io/posts/2019-10-05-logrus-life-cycle/</link>
      <pubDate>Sat, 05 Oct 2019 11:21:24 +0800</pubDate>
      <guid>https://georgehao.github.io/posts/2019-10-05-logrus-life-cycle/</guid>
      <description></description>
    </item>
    <item>
      <title>Logrus源码阅读(1)--基本用法</title>
      <link>https://georgehao.github.io/posts/2019-06-11-logurs-1/</link>
      <pubDate>Tue, 16 Jul 2019 20:06:27 +0800</pubDate>
      <guid>https://georgehao.github.io/posts/2019-06-11-logurs-1/</guid>
      <description>&lt;p&gt;选择golang日志库时, 使用&lt;a href=&#34;https://github.com/sirupsen/logrus&#34;&gt;logrus&lt;/a&gt;的主要原因就是因为star比较多, 而且社区活跃度非常高. 在项目使用过程中, 发现logrus的调用入口, 性能, 插件, 自定义插件, 输出格式等都非常优秀, 值得学习一下&lt;/p&gt;
&lt;p&gt;整体结构图&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;logrus&#34; loading=&#34;lazy&#34; src=&#34;http://images.haohongfan.com/logrus.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;整体来看总共提供两种方式调用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;logrus.Info(&amp;ldquo;hello logrus&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;logrus.WithField(logruns.Fields{&amp;ldquo;key1&amp;rdquo;:&amp;ldquo;v1&amp;rdquo;}).Info(&amp;ldquo;hello logrus&amp;rdquo;)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些函数都在&lt;code&gt;exported.go&lt;/code&gt;文件中. 当然为了提供不同级别输出日志的功能, 里面实现了各种各样的&lt;code&gt;print&lt;/code&gt;函数, 如: &lt;code&gt;Infof&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Errorf&lt;/code&gt;, &lt;code&gt;Panic&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;在直接使用logrus等情况下&lt;code&gt;exported.go&lt;/code&gt;是唯一入口, 但是我们可以简单封装一下, 跟项目框架更加贴合, 这个留在后面用具体例子来解释这么做的原因和好处&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
